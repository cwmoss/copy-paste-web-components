let images = [],
  dialog = null,
  image = null,
  current = null,
  close_btn = null;
const show = (e) => {
    (current = e), (image.src = e);
    "" == window.location.hash && (window.location = "#" + e),
      dialog.showModal(),
      window.addEventListener("keydown", keydown),
      (document.body.style.overflow = "hidden"),
      close_btn.focus();
  },
  close = (e) => {
    window.removeEventListener("keydown", keydown),
      history.replaceState(null, null, " "),
      dialog.close(),
      (document.body.style.overflow = "");
  },
  prev = (e) => {
    let n = images.findIndex((e) => e == current);
    n--, n < 0 && (n += images.length), show(images[n]);
  },
  next = (e) => {
    let n = images.findIndex((e) => e == current);
    n++, n >= images.length && (n = 0), show(images[n]);
  },
  keydown = (e) => {
    const n = e.keyCode;
    39 == n && next(), 37 == n && prev(), 27 == n && close();
  };
export default class EnlargeImage extends HTMLElement {
  static tagname = "enlarge-image";
  constructor() {
    super(),
      this.attachShadow({ mode: "open" }),
      dialog
        ? (this.shadowRoot.innerHTML = `<style>${styles}</style><slot></slot>`)
        : ((dialog = !0), this.init_dialog()),
      (this.big = this.getAttribute("big")),
      images.push(this.big);
  }
  connectedCallback() {
    (this.image = this.querySelector("img")),
      this.image.addEventListener("click", this);
  }
  disconnectedCallback() {
    this.image.removeEventListener("click", this);
  }
  init_dialog() {
    (this.shadowRoot.innerHTML = dialog_html),
      (dialog = this.shadowRoot.querySelector("dialog")),
      dialog.querySelector(".prev").addEventListener("click", prev),
      dialog.querySelector(".next").addEventListener("click", next),
      (close_btn = dialog.querySelector(".close")),
      close_btn.addEventListener("click", close),
      (image = dialog.querySelector("img")),
      window.addEventListener("hashchange", this);
  }
  handleEvent(e) {
    "click" == e.type && show(this.big),
      "hashchange" == e.type && this.hashchange();
  }
  hashchange() {
    "" == window.location.hash && close();
  }
}
const styles =
    "\n  slot{\n    cursor: zoom-in;\n  }\n  dialog{\n    border:0;\n    width:90vh;\n    height:90vh;\n  }\n  main{\n    display: flex;\n    position: relative;\n    flex-direction:column;\n    width:100%;\n    height:100%;\n  }\n  button{\n    border:none;\n    padding: 6px;\n    border-radius: 3px;\n    background:transparent;\n  }\n  button:hover{\n    background-color: #eee;\n  }\n  section{\n    width:100%;\n    height:100%;\n  }\n  img{\n    max-width:100%;\n    max-height:100%;\n    object-fit: cover;\n  }\n    nav{\n      display:flex;\n      position:absolute;\n      right:0;\n      gap:2rem;\n    }\n  ::backdrop {\n    background-image: linear-gradient(\n      45deg,\n      magenta,\n      rebeccapurple,\n      dodgerblue,\n      green\n    );\n    opacity: 0.75;\n  }\n \n",
  dialog_html = `\n<style>${styles}</style>\n<dialog>\n<main>\n  <nav><button class="prev">P</button>\n  <button class="next">N</button>\n  <button class="close" tabindex="0">X</button></nav>\n\t<section><img></section>\n</main>\n</dialog>\n<slot></slot>\n`;
customElements.define(EnlargeImage.tagname, EnlargeImage);
